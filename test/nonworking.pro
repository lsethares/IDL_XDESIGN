
function mlFromTraie,rtFolder,funk=funk,$
  mlpars=mlpars,nbil=nbil,rough=rough,extraT=extraT,$
  ocThickness=ocThickness,materials=materials
  ;return an array with the multilayer parameters extracted
  ;from the setting file of the fortran raytracing file.
  ;function is a function that transform the parameters in dspacing.
  ; if not provided, 4-dim power-law is assumed
    ;legge i dati del coating e l'area
  ;if arg_present (materials) then begin
  mat1=readnamelistVar(rtFolder+path_sep()+'imp_OffAxis.txt','matsub')
  ;mat1='af_files'+path_sep()+mat1
  mat1=file_dirname(rtFolder)+path_sep()+'af_files'+path_sep()+mat1
  mat2=readnamelistVar(rtFolder+path_sep()+'imp_OffAxis.txt','mat2even')
  ;mat2='af_files'+path_sep()+mat2
  mat2=file_dirname(rtFolder)+path_sep()+'af_files'+path_sep()+mat2
  mat3=readnamelistVar(rtFolder+path_sep()+'imp_OffAxis.txt','mat1odd')
  ;mat3='af_files'+path_sep()+mat3
  mat3=file_dirname(rtFolder)+path_sep()+'af_files'+path_sep()+mat3
  materials=[mat1,mat2,mat3]
  ndim=fix(readnamelistVar(rtFolder+path_sep()+'imp_OffAxis.txt','ndim'))
  nbil=fix(readnamelistVar(rtFolder+path_sep()+'imp_OffAxis.txt','n_bilayers')) 
  mlpars=fltarr(ndim)
  for i=0,ndim-1 do begin
    mlpars[i]=float(readnamelistVar(rtFolder+path_sep()+'imp_OffAxis.txt','par('+string(i+1,format='(i1)')+')'))
  endfor
  if n_elements(funk) eq 0 then begin
    dSpac=thicknessPL(mlpars[0],-mlpars[1],mlpars[2],nbil,mlpars[3])
  endif else begin
    dSpac=call_function(funk,mlpars,nbil)
  endelse
  
  return,dspac
end



rtFolder='E:\work\workOA\traie8\studioDistrib1\sh24D295'
outfile="areawdist.dat"
;testOAdist,rtFolder,outfile,dspacing=dspacing,materials=mat

;pro testOAdist,rtFolder,mlpars,outfile,old=old
;pro testOAdist,rtFolder,outfile,old=old,dSpacing=dspacing,materials=mat
  ;confronta l'area efficace fuori asse di una shell, calcolata
  ;con la distribuzione di angoli e dai risultati raytracing.
  ;dspacing and materials for output.
  
  setstandarddisplay
  ;load data from raytracing

  readcol,rtFolder+path_sep()+'shellStruct.txt',alpha,aGeo,F='X,X,X,X,X,F,F,X'

  if n_elements(alpha) gt 1 then begin
    if n_elements(index) eq 0 then index=0
      print,"more than one shell, will use the shell nr.",index, "of ",n_elements(alpha)
      print,"not sure it will work."
      alpha=float(alpha[index])
      ageo=ageo[index]
      wait,2
  endif else begin
    alpha=float(alpha[0])
    ageo=ageo[0]
  endelse

  theta=float(getOAangle(rtFolder))
  nangles=n_elements(theta)
  if keyword_set(old) then readcol, rtFolder+path_sep()+'aree.txt',ener,area $
  else readcol, rtFolder+path_sep()+'aree.txt',ener,area,sigma,sigmarel

  nener=len_blocks(ener,nblocks=n)
  if n ne nangles then print,"nblocks in area: ",n," nangles: ",nangles
  ener=ener[0:nener-1]
  area=reform(area,nener,nangles)
  
  
  dSpac=mlFromTraie(rtFolder,rough=rough,materials=mat)
  rough=float(4)
  mat1=mat[0]
  mat2=mat[1]
  mat3=mat[2]
  loadRI,ener,mat1,mat2,mat3
  
  nbins=intarr(nangles)
  for i=0,nangles-1 do begin
    tStep=15./206265.
    d=oaAngleDistr(alpha,theta[i],locations=a1x,thetaStep=tstep)
    nbins[i]=n_elements(d)
    apar=fltarr(nener)
    for j=0,nbins[i]-1 do begin
      ang=a1x[j]
      r1=reflexDLL (ener, ang, dSpac, rough)
      r2=reflexDLL (ener, 2*alpha-ang, dSpac, rough)
      apar=apar+r1*r2*d[j]
    endfor
  endfor
  dummy=reflexDLL (ener, 2.*alpha-ang, dSpac, rough,/unload)
  print,"--------------"
  print,"number of evaluation: ",total(nbins),format='(a,i)'
  print,"evaluations per angle: ",nbins

 
  get_lun,nf
  openw,nf,rtFolder+path_sep()+"logOaDistResults.dat"
  printf,nf,systime()
  printf,nf,"Log generated by ",(ROUTINE_INFO('nonworking', /SOURCE)).path
  printf,nf,"results file: ",outfile
  printf,nf,"contains the columns:"
  printf,nf,"ener areaRTat",nangles,"offaxisAngles areaFromDistribat",nangles,"angles"
  printf,nf,"execution ended on ",systime()
  printf,nf,"raytracing results folder: ",rtFolder
  printf,nf,"off-axis angles (arcmin):",string(theta*206265/60.),$
    format='(a,'+string(nangles+1)+'f8.3)'
  printf,nf,"shell slope: ",alpha
  printf,nf,"shell collecting area: ",ageo
  printf,nf,"bins settings: "
  if n_elements(nb) ne 0 then printf,nf,"nbins(nb): ",nb
  if n_elements(tStep) ne 0 then printf,nf,"angular step(tStep): ",tStep
  printf,nf,"--------------"
  printf,nf,"time elapsed: ",endtime-starttime," s"
  printf,nf,"number of evaluation: ",total(nbins),format='(a,i)'
  printf,nf,"evaluations per angle: ",nbins,$
    format='(a,'+string(nangles+1)+'i)'
  free_lun,nf


end